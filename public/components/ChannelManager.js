function ChannelManager({ channels = [], onRefresh }) {
  try {
  const [showModal, setShowModal] = React.useState(false);
  const [editingChannel, setEditingChannel] = React.useState(null);
  const [formData, setFormData] = React.useState({
    name: '',
    telegramChannelId: '',
    isActive: true,
    isPaused: false,
  autoExecute: false,
    maxPositionPercentage: 100,
    riskPercentage: 2,
    tpPercentages: [25.0, 25.0, 50.0]
  });

    // API call function
    const apiCall = async (endpoint, options = {}) => {
      try {
        const response = await fetch(`${window.location.origin}/api${endpoint}`, {
          method: options.method || 'GET',
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          },
          body: options.body ? JSON.stringify(options.body) : undefined
        });

        const data = await response.json();

        if (!response.ok) {
          // Extract the actual error message from the response body
          const errorMessage = data.error?.details || data.error?.message || data.message || `HTTP error! status: ${response.status}`;
          throw new Error(errorMessage);
        }

        return data;
      } catch (error) {
        console.error('API call failed:', error);
        throw error;
      }
    };

    const toggleChannelStatus = async (channel) => {
      try {
        // Determine which endpoint to call based on current channel state
        const endpoint = (channel.isActive && !channel.isPaused) ? 'pause' : 'resume';
        await apiCall(`/channels/${channel.id}/${endpoint}`, { method: 'POST' });
        if (onRefresh) onRefresh();
      } catch (error) {
        console.error('Failed to toggle channel status:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞');
      }
    };

    const openAddModal = () => {
      setEditingChannel(null);
      setFormData({
        name: '',
        telegramChannelId: '',
        isActive: true,
        isPaused: false,
  autoExecute: false,
        maxPositionPercentage: 100,
        riskPercentage: 2,
        tpPercentages: [25.0, 25.0, 50.0]
      });
      setShowModal(true);
    };

    const openEditModal = (channel) => {
      setEditingChannel(channel);
      setFormData({
        name: channel.name,
        telegramChannelId: channel.telegramChannelId,
        isActive: channel.isActive,
        isPaused: channel.isPaused,
  autoExecute: !!channel.autoExecute,
        maxPositionPercentage: channel.maxPositionPercentage || 100,
        riskPercentage: channel.riskPercentage || 2,
        tpPercentages: channel.tpPercentages || [25.0, 25.0, 50.0]
      });
      setShowModal(true);
    };

    const handleSubmit = async (e) => {
      e.preventDefault();
      try {
        if (editingChannel) {
          // Update existing channel
          await apiCall(`/channels/${editingChannel.id}`, {
            method: 'PUT',
            body: formData
          });
        } else {
          // Create new channel
          await apiCall('/channels', {
            method: 'POST',
            body: formData
          });
        }

        setShowModal(false);
        setEditingChannel(null);
        resetForm();
        if (onRefresh) onRefresh();

        // Show success message
        const message = editingChannel ? '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!';
        if (typeof window !== 'undefined' && window.showNotification) {
          window.showNotification(message, 'success');
        } else {
          alert(message);
        }
      } catch (error) {
        console.error('Failed to save channel:', error);

        // Provide specific error messages based on the error
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞';

        if (error.message) {
          if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') || error.message.includes('already exists')) {
            errorMessage = '‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\nüí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID –∫–∞–Ω–∞–ª–∞.';
          } else if (error.message.includes('required') || error.message.includes('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')) {
            errorMessage = '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n‚Ä¢ Telegram Channel ID';
          } else if (error.message.includes('percentage') || error.message.includes('–ø—Ä–æ—Ü–µ–Ω—Ç')) {
            errorMessage = '‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:\n‚Ä¢ TP –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ 100%\n‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 100';
          } else if (error.message.includes('Telegram') || error.message.includes('–±–æ—Ç')) {
            errorMessage = '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram:\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É';
          } else if (error.message.includes('BingX') || error.message.includes('—Å—É–±-–∞–∫–∫–∞—É–Ω—Ç')) {
            errorMessage = '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ\n‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ persists';
          } else {
            errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
          }
        }

        alert(errorMessage);
      }
    };

    const resetForm = () => {
      setFormData({
        name: '',
        telegramChannelId: '',
        isActive: true,
        isPaused: false,
  autoExecute: false,
        maxPositionPercentage: 100,
        riskPercentage: 2,
        tpPercentages: [25.0, 25.0, 50.0]
      });
    };

    const deleteChannel = async (channelId) => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?')) {
        try {
          await apiCall(`/channels/${channelId}`, { method: 'DELETE' });
          if (onRefresh) onRefresh();
        } catch (error) {
          console.error('Failed to delete channel:', error);

          // Provide specific error messages based on the error
          let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞';

          if (error.message) {
            if (error.message.includes('open positions') || error.message.includes('–æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π')) {
              errorMessage = '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏!\n\nüí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞.';
            } else if (error.message.includes('foreign key') || error.message.includes('–≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞') || error.message.includes('FOREIGN_KEY_CONSTRAINT')) {
              errorMessage = '‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑-–∑–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!\n\nüí° –†–µ—à–µ–Ω–∏–µ: –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.';
            } else if (error.message.includes('not found') || error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
              errorMessage = '‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\nüí° –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            } else if (error.message.includes('permission') || error.message.includes('–¥–æ—Å—Ç—É–ø')) {
              errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞!\n\nüí° –†–µ—à–µ–Ω–∏–µ: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
            } else {
              errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
            }
          }

          alert(errorMessage);
        }
      }
    };

    const toggleAutoExecute = async (channel) => {
      try {
        await apiCall(`/channels/${channel.id}`, {
          method: 'PUT',
          body: { autoExecute: !channel.autoExecute }
        });
        if (onRefresh) onRefresh();
      } catch (error) {
        console.error('Failed to toggle auto-execution:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º');
      }
    };

    return (
      <div data-name="channel-manager" data-file="components/ChannelManager.js">
        {/* Add Channel Button */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <h2 className="text-xl font-semibold text-[var(--text-primary)]">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</h2>
            <p className="text-sm text-[var(--text-secondary)] mt-1">
              –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {channels.length} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {channels.filter(ch => ch.isActive && !ch.isPaused).length}
            </p>
          </div>
          <button
            onClick={openAddModal}
            className="btn-secondary"
          >
            <div className="flex items-center space-x-2">
              <span className="text-lg">+</span>
              <span>–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª</span>
            </div>
          </button>
        </div>

        {/* Channels Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {channels.map(channel => (
            <div key={channel.id} className="card hover:card-glow transition-all duration-300">
              {/* Channel Header */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-[var(--primary-color)] to-[var(--secondary-color)] rounded-lg flex items-center justify-center">
                    <span className="text-white text-xl">üì°</span>
                  </div>
                  <div>
                    <h3 className="font-semibold text-[var(--text-primary)]">{channel.name}</h3>
                    <p className="text-sm text-[var(--text-secondary)]">@{channel.telegramChannelId}</p>
                  </div>
                </div>
                
                  <div className="flex items-center space-x-2">
                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                      channel.isActive && !channel.isPaused 
                        ? 'bg-[var(--secondary-color)]/20 text-[var(--secondary-color)]'
                        : 'bg-[var(--accent-color)]/20 text-[var(--accent-color)]'
                    }`}>
                      {channel.isActive && !channel.isPaused ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                    </div>
                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${
                      channel.autoExecute
                        ? 'bg-emerald-500/20 text-emerald-400'
                        : 'bg-sky-500/20 text-sky-400'
                    }`} title="–†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º">
                      {channel.autoExecute ? '–ê–≤—Ç–æ' : '–†—É—á–Ω–æ–π'}
                    </div>
                  </div>
              </div>

              {/* Channel Stats */}
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <div className="text-sm text-[var(--text-secondary)]">–°–∏–≥–Ω–∞–ª–æ–≤</div>
                  <div className="font-semibold text-[var(--text-primary)]">{channel.signalCount || 0}</div>
                </div>
                <div>
                  <div className="text-sm text-[var(--text-secondary)]">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                  <div className="font-semibold text-[var(--secondary-color)]">{channel.successRate || 0}%</div>
                </div>
                <div>
                  <div className="text-sm text-[var(--text-secondary)]">P&L</div>
                  <div className="font-semibold text-[var(--secondary-color)]">+{channel.totalPnL || 0}%</div>
                </div>
                <div>
                  <div className="text-sm text-[var(--text-secondary)]">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π</div>
                  <div className="font-semibold text-[var(--text-primary)]">{channel.activePositions || 0}</div>
                </div>
              </div>

              {/* Channel Actions */}
              <div className="flex space-x-2 pt-4 border-t border-[var(--border-color)]">
                <button
                  onClick={() => toggleAutoExecute(channel)}
                  className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    channel.autoExecute
                      ? 'bg-emerald-500/10 text-emerald-400 hover:bg-emerald-500/20'
                      : 'bg-sky-500/10 text-sky-400 hover:bg-sky-500/20'
                  }`}
                  title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ê–≤—Ç–æ/–†—É—á–Ω–æ–π"
                >
                  {channel.autoExecute ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ'}
                </button>
                <button
                  onClick={() => toggleChannelStatus(channel)}
                  className={`flex-1 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    channel.isActive && !channel.isPaused
                      ? 'bg-[var(--accent-color)]/10 text-[var(--accent-color)] hover:bg-[var(--accent-color)]/20'
                      : 'bg-[var(--secondary-color)]/10 text-[var(--secondary-color)] hover:bg-[var(--secondary-color)]/20'
                  }`}
                >
                  {channel.isActive && !channel.isPaused ? '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
                <button
                  onClick={() => openEditModal(channel)}
                  className="flex-1 px-3 py-2 bg-gradient-to-r from-[var(--primary-color)]/10 to-[var(--secondary-color)]/10 text-[var(--primary-color)] rounded-lg text-sm hover:from-[var(--primary-color)]/20 hover:to-[var(--secondary-color)]/20 transition-all duration-300 transform hover:scale-105"
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞"
                >
                  <div className="flex items-center justify-center space-x-2">
                    <span className="text-lg">‚öôÔ∏è</span>
                    <span>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å</span>
                  </div>
                </button>
                <button 
                  onClick={() => deleteChannel(channel.id)}
                  className="px-3 py-2 bg-[var(--danger-color)]/10 text-[var(--danger-color)] rounded-lg text-sm hover:bg-[var(--danger-color)]/20 transition-colors"
                >
                  <span className="text-sm">üóëÔ∏è</span>
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Modal Form */}
        {showModal && (
          <div className="fixed inset-0 bg-black/50 flex items-start justify-center z-50 p-4 pt-20">
            <div className="card max-w-md w-full">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-[var(--text-primary)]">
                  {editingChannel ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª' : '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'}
                </h3>
                <button 
                  onClick={() => setShowModal(false)}
                  className="text-[var(--text-secondary)] hover:text-[var(--text-primary)]"
                >
                  <span className="text-xl">‚úï</span>
                </button>
              </div>

              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className="input-field w-full"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    Telegram Channel ID
                  </label>
                  <input
                    type="text"
                    value={formData.telegramChannelId}
                    onChange={(e) => setFormData({...formData, telegramChannelId: e.target.value})}
                    className={`input-field w-full ${editingChannel ? 'bg-[var(--surface-dark)] text-[var(--text-secondary)] cursor-not-allowed' : ''}`}
                    placeholder="@channel_name –∏–ª–∏ channel_id"
                    required
                    readOnly={!!editingChannel}
                    disabled={!!editingChannel}
                  />
                  {editingChannel && (
                    <small className="text-[var(--text-secondary)] mt-1 block">
                      ID –∫–∞–Ω–∞–ª–∞ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    </small>
                  )}
                  {!editingChannel && channels.length > 0 && (
                    <div className="mt-2 p-3 bg-[var(--surface-dark)] rounded-lg border border-[var(--border-color)]">
                      <small className="text-[var(--text-secondary)] block mb-2">
                        üí° <strong>–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</strong>
                      </small>
                      <div className="flex flex-wrap gap-1">
                        {channels.slice(0, 5).map(channel => (
                          <span key={channel.id} className="inline-block px-2 py-1 bg-[var(--primary-color)]/20 text-[var(--primary-color)] text-xs rounded">
                            {channel.telegramChannelId}
                          </span>
                        ))}
                        {channels.length > 5 && (
                          <span className="text-xs text-[var(--text-secondary)]">
                            ...–∏ –µ—â—ë {channels.length - 5}
                          </span>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞–º
                  </label>
                  <div className="flex items-center justify-between p-3 bg-[var(--surface-dark)] rounded-lg border border-[var(--border-color)]">
                    <span className="text-sm text-[var(--text-secondary)]">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
                    <label className="inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        className="sr-only peer"
                        checked={!!formData.autoExecute}
                        onChange={(e) => setFormData({ ...formData, autoExecute: e.target.checked })}
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-500 relative"></div>
                      <span className="ml-3 text-sm font-medium text-[var(--text-primary)]">{formData.autoExecute ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}</span>
                    </label>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%)
                  </label>
                  <input
                    type="number"
                    value={formData.maxPositionPercentage}
                    onChange={(e) => setFormData({...formData, maxPositionPercentage: Number(e.target.value)})}
                    className="input-field w-full"
                    min="1"
                    max="100"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ (%)
                  </label>
                  <input
                    type="number"
                    value={formData.riskPercentage}
                    onChange={(e) => setFormData({...formData, riskPercentage: Number(e.target.value)})}
                    className="input-field w-full"
                    min="0.1"
                    max="10"
                    step="0.1"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-[var(--text-primary)] mb-2">
                    TP –ü—Ä–æ—Ü–µ–Ω—Ç—ã (%)
                  </label>
                  <div className="grid grid-cols-3 gap-2">
                    {[0, 1, 2].map(index => (
                      <input
                        key={index}
                        type="number"
                        value={formData.tpPercentages[index]}
                        onChange={(e) => {
                          const newTpPercentages = [...formData.tpPercentages];
                          newTpPercentages[index] = Number(e.target.value);
                          setFormData({...formData, tpPercentages: newTpPercentages});
                        }}
                        className="input-field w-full"
                        min="0.1"
                        max="100"
                        step="0.1"
                        placeholder={`TP${index + 1}`}
                        required
                      />
                    ))}
                  </div>
                </div>

                <div className="flex space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setShowModal(false)}
                    className="flex-1 px-4 py-2 bg-[var(--surface-dark)] text-[var(--text-secondary)] rounded-lg border border-[var(--border-color)] hover:bg-[var(--background-dark)] transition-colors"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    type="submit"
                    className="flex-1 btn-primary"
                  >
                    {editingChannel ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    );
  } catch (error) {
    console.error('ChannelManager component error:', error);
    return null;
  }
}

// Make ChannelManager available globally for browser environment
if (typeof window !== 'undefined') {
  window.ChannelManager = ChannelManager;
}
